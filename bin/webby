#!/usr/bin/env ruby

require 'rubygems'
gem 'optiflag'
require 'optiflag'
begin
  require File.join(File.dirname(__FILE__), '..', 'lib', 'webbynode-api')
rescue LoadError
  require 'webbynode-api'
end

module WebbyNodeTool extend OptiFlagSet
  optional_flag "email"
  optional_flag "token"
  flag "act" do
    alternate_forms "action","A","a"
    description "API action to be taken, in the form of <type> <action> <argument>"
    arity 3
  end
  optional_flag "verbose" do
    no_args
    alternate_forms "V","v"
  end

  and_process!
end

VERBOSE = ARGV.flags.verbose?

if !ARGV.flags.email? || !ARGV.flags.token
  yaml_config = File.join(ENV['HOME'],'.webbynode.yml')
  if File.exist?(yaml_config)
    puts "Loading API credentials from #{yaml_config}..." if VERBOSE
    CONFIG = YAML.load_file yaml_config
    EMAIL = CONFIG["email"]
    TOKEN = CONFIG["token"]
  else
    puts "Email or token parameter missing and no config file exists at ~/.webbynode.yml"
  end
else
  EMAIL = ARGV.flags.email
  TOKEN = ARGV.flags.token
end

type = ARGV.flags.act[0]
action = ARGV.flags.act[1]
target = ARGV.flags.act[2]
case type
when "webby" then
  case action
    when "list"
      webbies = WebbyNode::WebbyList.new(:email => EMAIL, :token => TOKEN).data
      for webby in webbies
        puts "Webby - hostname: #{webby['name']} - ip: #{webby['ip']} - status: #{webby['status']}"
        puts "        node: #{webby['node']} - plan: #{webby['plan']}"
        puts "        notes: #{webby['notes']}" if webby['notes']
      end
    when "status"
      puts "Webby Status: #{target}: " + WebbyNode::Webby.new(:email => EMAIL, :token => TOKEN, :hostname => target).status
    when "restart", "start"
      puts "#{action.capitalize}ing Webby: #{target}..."
      puts "Job ID: " + WebbyNode::Webby.new(:email => EMAIL, :token => TOKEN, :hostname => target).send(action).to_s
    when "shutdown"
      puts "Shutting Down Webby: #{target}..."
      puts "Job ID: " + WebbyNode::Webby.new(:email => EMAIL, :token => TOKEN, :hostname => target).send(action).to_s
    else
      puts "Not a valid action for a webby: #{action}."
      puts "Valid options include: " + %w(list status start restart shutdown).join(", ")
  end
else
  puts "Valid options for type:"
  %w(webby).each {|type| puts type.capitalize }
end
